// Code generated by MockGen. DO NOT EDIT.
// Source: repository/movie_repository_interface.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/dilaragorum/movie-go/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIMovieRepository is a mock of IMovieRepository interface.
type MockIMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMovieRepositoryMockRecorder
}

// MockIMovieRepositoryMockRecorder is the mock recorder for MockIMovieRepository.
type MockIMovieRepositoryMockRecorder struct {
	mock *MockIMovieRepository
}

// NewMockIMovieRepository creates a new mock instance.
func NewMockIMovieRepository(ctrl *gomock.Controller) *MockIMovieRepository {
	mock := &MockIMovieRepository{ctrl: ctrl}
	mock.recorder = &MockIMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMovieRepository) EXPECT() *MockIMovieRepositoryMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockIMovieRepository) CreateMovie(movie model.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockIMovieRepositoryMockRecorder) CreateMovie(movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockIMovieRepository)(nil).CreateMovie), movie)
}

// DeleteAllMovies mocks base method.
func (m *MockIMovieRepository) DeleteAllMovies() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllMovies")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllMovies indicates an expected call of DeleteAllMovies.
func (mr *MockIMovieRepositoryMockRecorder) DeleteAllMovies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllMovies", reflect.TypeOf((*MockIMovieRepository)(nil).DeleteAllMovies))
}

// DeleteMovie mocks base method.
func (m *MockIMovieRepository) DeleteMovie(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockIMovieRepositoryMockRecorder) DeleteMovie(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockIMovieRepository)(nil).DeleteMovie), id)
}

// GetMovie mocks base method.
func (m *MockIMovieRepository) GetMovie(id int) (model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", id)
	ret0, _ := ret[0].(model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockIMovieRepositoryMockRecorder) GetMovie(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockIMovieRepository)(nil).GetMovie), id)
}

// GetMovies mocks base method.
func (m *MockIMovieRepository) GetMovies() ([]model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies")
	ret0, _ := ret[0].([]model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockIMovieRepositoryMockRecorder) GetMovies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockIMovieRepository)(nil).GetMovies))
}

// UpdateMovie mocks base method.
func (m *MockIMovieRepository) UpdateMovie(id int, movie model.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", id, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockIMovieRepositoryMockRecorder) UpdateMovie(id, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockIMovieRepository)(nil).UpdateMovie), id, movie)
}
